#define COMBO_LAYER(NAME, BINDINGS, KEYPOS, LAYERS) \
  combo_##NAME { \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
    timeout-ms = <45>; \
};
#define COMBO_ANY(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    timeout-ms = <45>; \
};

combos {
    compatible = "zmk,combos";

// Mods
COMBO_ANY(lCtrl,       &kp LCTRL,       LB5 LB4)
COMBO_ANY(lAlt,        &kp LALT,        LB4 LB3)
COMBO_ANY(lGui,        &kp LGUI,        LB3 LB2)
COMBO_ANY(lCtrlAlt,    &kp LC(LALT),    LB5 LB4 LB3)
COMBO_ANY(lAltGui,     &kp LA(LGUI),    LB4 LB3 LB2)
COMBO_ANY(lCtrlGui,    &kp LC(LGUI),    LB5 LB4 LB3 LB2)
COMBO_ANY(lCtrlAltGui, &kp LC(LA(LGUI)), LB5 LM4 LM3 LB2)
COMBO_ANY(rCtrl,       &kp RCTRL,       RB4 RB5)
COMBO_ANY(rAlt,        &kp RALT,        RB3 RB4)
COMBO_ANY(rGui,        &kp RGUI,        RB2 RB3)
COMBO_ANY(rCtrlAlt,    &kp RC(RALT),    RB3 RB4 RB5)
COMBO_ANY(rAltGui,     &kp RA(RGUI),    RB2 RB3 RB4)
COMBO_ANY(rCtrlGui,    &kp RC(RGUI),    RB2 RB3 RB4 RB5)
COMBO_ANY(rCtrlAltGui, &kp RC(RA(RGUI)), RB2 RM3 RM4 RB5)

// Shortcuts
COMBO_LAYER(cut,   &kp RG(X),      LB5 LB4, NAV) // cut
COMBO_LAYER(copy,   &kp RG(C),     LB4 LB3, NAV) // copy
COMBO_LAYER(paste,   &kp RG(V),    LB3 LB2, NAV) // paste
COMBO_LAYER(undo,   &kp RG(Z),     LM5 LM4, NAV) // undo
COMBO_LAYER(redo,   &kp RG(LS(Z)), LM2 LM2x, NAV) // redo
COMBO_LAYER(sall,   &kp RG(A),     LT4 LT3, NAV) // select all
COMBO_LAYER(find,   &kp RG(F),     LT3 LT2, NAV) // find
COMBO_LAYER(close,   &kp RG(W),    LT2 LT2x, NAV) // close
COMBO_LAYER(quit,   &kp RG(Q),     LT5 LT4, NAV) // quit
COMBO_LAYER(appswitch, &AppSwitch, LM4 LM3, NAV) // app swapper
COMBO_LAYER(tabswitch, &TabSwitch, LM3 LM2, NAV) // tab swapper
COMBO_LAYER(capswd, &caps_word, L1x R1x, BASE) // caps word

// Editing actions (&whitespace)
COMBO_ANY(tab,      &kp TAB,        LM5 LM3)
COMBO_ANY(stab,     &kp LS(TAB),    LT5 LT3)
COMBO_ANY(spce,     &kp SPACE,      LM2 LM2x)
COMBO_ANY(bspcdel,  &BspcDel,       LB2 LB2x) 
COMBO_ANY(esc,      &kp ESC,        LT5 LT4)

// H Digraphs REQUIRE macros (defined earlier) to process
COMBO_LAYER(sch, &Sch, LM5 LM4 LM3, BASE) // Sch
COMBO_LAYER(tch, &Tch, LM5 LM4 LM2, BASE) // Tch
COMBO_LAYER(th,  &Th,      LM3 LM2, BASE) // Th
COMBO_LAYER(ch,  &Ch,      LM4 LM3, BASE) // Ch
COMBO_LAYER(wh,  &Wh,      LT4 LT3, BASE) // Wh
COMBO_LAYER(sh,  &Sh,      LM5 LM4, BASE) // Sh
COMBO_LAYER(gh,  &Gh,      LT3 LT2, BASE) // Gh
COMBO_LAYER(ght, &ght, LT4 LT3 LT2, BASE) // ght
COMBO_LAYER(ph,  &Ph,      LB4 LB2, BASE) // Ph

// Glyphs
COMBO_LAYER(typeQ, &lk_qu Q U,      LT4 LT2, BASE) //
COMBO_LAYER(typeZ, &kp Z,           LM4 LM2, BASE) //
COMBO_ANY(typeLt, &lk AMPS LT,      RT2 RT3) // < (& if held)
COMBO_ANY(typeGt, &lk PIPE GT,      RT3 RT4) // > (| if held)
COMBO_ANY(typeGrav, &kp AT,         RT4 RT5) // @
COMBO_ANY(typeExcl, &kp EXCL,       RM2 RM3) // !
COMBO_ANY(typeQues, &kp QMARK,      RM3 RM4) // ?
COMBO_ANY(typeEqual, &lk PRCNT EQUAL, RM2 RM4) // = (% if held)
COMBO_ANY(typeUnder, &kp UNDER,     RB2 RB4) // _
COMBO_ANY(typeTilde, &kp TILDE,     RM2 RM5) // tilde
COMBO_LAYER(typeNdash, &lk LA(LS(MINUS)) LA(MINUS), RM4 RM5, BASE) // N-dash (M-dash if held)

#ifdef EN_PRONOUN_COMBOS
#include "./pncombos.dtsi"
#endif
};
