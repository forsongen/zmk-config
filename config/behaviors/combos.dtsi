combos {
    compatible = "zmk,combos";

    /* MODS */

    ZMK_QCOMBO(lGlobe, &kp GLOBE, LM5 RB5, ALL)
    ZMK_QCOMBO(lCtrl,  &kp LCTRL, LM4 LB4, ALL)
    ZMK_QCOMBO(lAlt,   &kp LALT,  LM3 LB3, ALL)
    ZMK_QCOMBO(lGui,   &kp LGUI,  LM2 LB2, ALL)
    ZMK_QCOMBO(rGlobe, &kp GLOBE, RM5 RB5, ALL)
    ZMK_QCOMBO(rCtrl,  &kp RCTRL, RM4 RB4, ALL)
    ZMK_QCOMBO(rAlt,   &kp RALT,  RM3 RB3, ALL)
    ZMK_QCOMBO(rGui,   &kp RGUI,  RM2 RB2, ALL)

    /* LAYERS */
    // Enable overlays in config.h

    // Layers
    ZMK_QCOMBO(lSYM, &SYM_htsl, LB4 LB3, TYPE) // sl SYM (mo held)
    ZMK_QCOMBO(rSYM, &SYM_htsl, RB3 RB4, TYPE) // sl SYM (mo held)
    ZMK_QCOMBO(lNUM, &NUM_htsl, LB3 LB2, TYPE) // sl NUM (mo held)
    ZMK_QCOMBO(rNUM, &NUM_htsl, RB2 RB3, TYPE) // sl NUM (mo held)

    // Layer locks
    ZMK_QCOMBO(lSYMlock,   &SYMLOCK,   LB4 LM3, BASE NUM) // SYM lock
    ZMK_QCOMBO(rSYMlock,   &SYMLOCK,   RM3 RB4, BASE NUM) // SYM lock
    ZMK_QCOMBO(lSYMunlock, &SYMUNLOCK, LB4 LM3, SYM) // SYM unlock -> BASE
    ZMK_QCOMBO(rSYMunlock, &SYMUNLOCK, RM3 RB4, SYM) // SYM unlock -> BASE
    ZMK_QCOMBO(lNUMlock,   &NUMLOCK,   LM3 LB2, BASE SYM) // NUM lock
    ZMK_QCOMBO(rNUMlock,   &NUMLOCK,   RB2 RM3, BASE SYM) // NUM lock
    ZMK_QCOMBO(lNUMunlock, &NUMUNLOCK, LM3 LB2, NUM) // NUM unlock -> BASE
    ZMK_QCOMBO(rNUMunlock, &NUMUNLOCK, RB2 RM3, NUM) // NUM unlock -> BASE

    /* SHORTCUTS */ // RAISE

    ZMK_COMBO(cut,   &kp RG(X),     LM5 LM4, RAISE) // cut
    ZMK_COMBO(copy,  &kp RG(C),     LM4 LM3, RAISE) // copy
    ZMK_COMBO(paste, &kp RG(V),     LM3 LM2, RAISE) // paste
    ZMK_COMBO(undo,  &kp RG(Z),     LB4 LB3, RAISE) // undo
    ZMK_COMBO(redo,  &kp RG(LS(Z)), LB3 LB2, RAISE) // redo
    ZMK_COMBO(sall,  &kp RG(A),     LM5 LM3, RAISE) // select all
    ZMK_COMBO(find,  &kp RG(F),     LM4 LM2, RAISE) // find
    ZMK_COMBO(close, &kp RG(W),     LB5 LB4, RAISE) // close
    ZMK_COMBO(quit,  &kp RG(Q),     LT5 LT4, RAISE) // quit
    ZMK_COMBO(back,  &mkp MB4,      LT4 LT3, RAISE) // back
    ZMK_COMBO(fwd,   &mkp MB5,      LT3 LT2, RAISE) // forward

    /* ACTIONS */

    ZMK_COMBO(capswd, &caps_word, L1x R1x, TYPE)   // caps word

    /* KEYSTROKES */

    ZMK_COMBO(typeQ,  &lkqu Q M,     LT4 LT2, BASE) // Qu, Q if held
    ZMK_COMBO(typeZ,  &kp Z,         LM4 LM2, BASE) // Z
    ZMK_QCOMBO(tab,   &kp TAB,       LM5 LM3, TYPE)  // tab
    ZMK_QCOMBO(space, &kp SPACE, LM4 LM3 LM2, TYPE)  // space
    ZMK_QCOMBO(esc,   &kp ESC,       LT5 LT4, TYPE)  // esc

    /* H DIGRAPHS */

    ZMK_COMBO(typeSch, &Sch, LM5 LM4 LM3, BASE) // Sch
    ZMK_COMBO(typeTch, &Tch, LM5 LM4 LM2, BASE) // Tch
    ZMK_COMBO(typeTh,  &Th,      LM3 LM2, BASE) // Th
    ZMK_COMBO(typeCh,  &Ch,      LM4 LM3, BASE) // Ch
    ZMK_COMBO(typeWh,  &Wh,      LT4 LT3, BASE) // Wh
    ZMK_COMBO(typeSh,  &Sh,      LM5 LM4, BASE) // Sh
    ZMK_COMBO(typeGh,  &Gh,      LT3 LT2, BASE) // Gh
    ZMK_COMBO(typeGht, &ght, LT4 LT3 LT2, BASE) // ght
    ZMK_COMBO(typePh,  &Ph,      LB4 LB2, BASE) // Ph

    /* PUNCTUATION, CURRENCY, EQUIVALENCE */

    ZMK_COMBO(typeExcl,   &kp EXCL,        RT2 RT3, BASE) // !
    ZMK_COMBO(typeQues,   &kp QMARK,       RT3 RT4, BASE) // ?
    ZMK_COMBO(typeAt,     &kp AT,          RT4 RT5, BASE) // @
    ZMK_QCOMBO(typeUnder, &kp UNDER,       RB2 RB4, TYPE) // _
    ZMK_COMBO(typeEUR,    &kp LA(N2),      RT2 RT3, NUM) // €
    ZMK_COMBO(typeGBP,    &kp LS(N3),      RT3 RT4, NUM) // £
    ZMK_COMBO(typeUSD,    &kp DLLR,        RT4 RT5, NUM) // $
    ZMK_QCOMBO(typeEqual, &lk PRCNT EQUAL, RM2 RM4, TYPE ) // = (lk %)
    ZMK_QCOMBO(typeLt,    &lk AMPS LT,     RM2 RM3, TYPE) // < (lk &)
    ZMK_QCOMBO(typeGt,    &lk PIPE GT,     RM3 RM4, TYPE) // > (lk |)
    ZMK_QCOMBO(typeNdash,
             &lk LA(LS(MINUS)) LA(MINUS), RM4 RM5, TYPE) // – (lk —)

    /* HYPER */

    ZMK_QCOMBO(hyperSpace, &kp HP(SPACE), RB3 RB5, TYPE) // homerow
    ZMK_QCOMBO(hyperT,     &kp HP(T),     RT3 RT5, TYPE) // homerow search
    ZMK_QCOMBO(hyperA,     &kp HP(A),     RM3 RM5, TYPE) // homerow scroll

};