behaviors {

    /* LINGER KEYS */

    // General linger key behaviour
    ZMK_BEHAVIOR(lk, hold_tap,
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    )
    // Qu on tap, Q on linger
    ZMK_BEHAVIOR(lkqu, hold_tap,
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&Qu>;
    )
    // ` on tap, ``` on linger
    ZMK_BEHAVIOR(lkgrv, hold_tap,
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&tripleGrave>, <&kp>;
    )
    // ( on tap, (|) on linger
    ZMK_BEHAVIOR(lkpar, hold_tap,
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&pairPar>, <&kp>;
    )
    // [ on tap, [|] on linger
    ZMK_BEHAVIOR(lkbkt, hold_tap,
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&pairBkt>, <&kp>;
    )
    // { on tap, {|} on linger
    ZMK_BEHAVIOR(lkbrc, hold_tap,
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&pairBrc>, <&kp>;
    )
    // < on tap, <|> on linger
    ZMK_BEHAVIOR(lkltgt, hold_tap,
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&pairLtGt>, <&kp>;
    )

    /* CUSTOM HOLD-TAPS */
    ZMK_BEHAVIOR(lsl, hold_tap,
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&mo>, <&sl>;
    )
    ZMK_BEHAVIOR(modsk, hold_tap,
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&sk>;
    )

    /* MOD MORPHS */

    // , -> ;
    ZMK_BEHAVIOR(COMMASEMI, mod_morph,
        bindings = <&kp CMMA>, <&kp SEMI>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    )
    // . -> :
    ZMK_BEHAVIOR(DOTCOLON, mod_morph,
        bindings = <&kp DOT>, <&kp COLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    )
    // / -> *
    ZMK_BEHAVIOR(FSLHSTAR, mod_morph,
        bindings = <&kp FSLH>, <&kp STAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    )
    // # -> $
    ZMK_BEHAVIOR(HASHDLLR, mod_morph,
        bindings = <&kp RA(3)>, <&kp DLLR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    )
    // - -> +
    ZMK_BEHAVIOR(MINUSPLUS, mod_morph,
        bindings = <&kp MINUS>, <&kp PLUS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    )
    // ' -> (
    ZMK_BEHAVIOR(SQTLPAR, mod_morph,
        bindings = <&kp SQT>, <&lkpar RPAR LPAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    )
    // ' -> )
    ZMK_BEHAVIOR(DQTRPAR, mod_morph,
        bindings = <&kp DQT>, <&kp RPAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    )
    // Unused with H_BSPCDEL, included for reference
    // Bspc -> del
    //ZMK_BEHAVIOR(BSPCDEL, mod_morph,
    //    bindings = <&kp BSPC>, <&kp DEL>;
    //    mods = <(MOD_LSFT|MOD_RSFT)>;
    //)
    // Bspc -> del, hold -> hyper
    ZMK_BEHAVIOR(H_BSPCDEL, mod_morph,
        bindings = <&mt HYPER BSPC>, <&kp DEL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    )
    // Unused with L_SPCTAB, included for reference
    // Space -> tab
    //ZMK_BEHAVIOR(SPCTAB, mod_morph,
    //    bindings = <&kp SPACE>, <&kp TAB>;
    //    mods = <(MOD_LSFT|MOD_RSFT)>;
    //)
    // Space -> tab, hold -> lower
    ZMK_BEHAVIOR(L_SPCTAB, mod_morph,
        bindings = <&lt LOWER SPACE>, <&kp TAB>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    )
    // Sticky shift -> caps, hold -> shift
    ZMK_BEHAVIOR(superLSHFT, mod_morph,
        bindings = <&modsk LSHFT LSHFT>, <&kp CAPS>;
        mods = <(MOD_LSFT)>;
    )
    // Sticky shift -> caps, hold -> shift
    ZMK_BEHAVIOR(superRSHFT, mod_morph,
        bindings = <&modsk RSHFT RSHFT>, <&kp CAPS>;
        mods = <(MOD_RSFT)>;
    )

    /* SWAPPERS */

    // Cmd-tab
    ZMK_BEHAVIOR(app_swap, tri_state,
        bindings = <&kt RCMD>, <&kp TAB>, <&kt RCMD>;
        ignored-key-positions = <1>;
    )
    // Ctrl-tab
    ZMK_BEHAVIOR(tab_swap, tri_state,
        bindings = <&kt RCTRL>, <&kp TAB>, <&kt RCTRL>;
        ignored-key-positions = <1>;
    )

};